using PagedList;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using WebApplication17.Models;

namespace WebApplication17.Controllers
{
    public class SanPhamsController : Controller
    {
        private Model1 db = new Model1();

        // GET: SanPhams
        public ActionResult Index(int? page, List<int> brands, string price)
        {
            var searchString = Request.Form["timkiem"];
            int pageSize = 16;
            int pageNumber = page ?? 1;
            List<SanPham> sanPhams = db.SanPham.Include(s => s.HangSP).Where(s => s.trangthai == true).ToList();
            if (!string.IsNullOrEmpty(searchString))
            {
                sanPhams = db.SanPham.Where(sp => sp.tensp.Contains(searchString)).ToList();
            }
            if (brands != null && brands.Count > 0)
            {
                sanPhams = sanPhams.Where(sp => brands.Contains(sp.HangSP.mahang)).ToList();

            }
            if (!string.IsNullOrEmpty(price))
            {
                switch (price)
                {
                    case "price-1":
                        sanPhams = sanPhams.OrderBy(s => s.giaban).ToList();
                        break;
                    case "price-2":
                        sanPhams = sanPhams.OrderByDescending(s => s.giaban).ToList();
                        break;
                    case "price-3":
                        sanPhams = sanPhams.Where(s => s.giaban <= 10000000).ToList();
                        break;
                    case "price-4":
                        sanPhams = sanPhams.Where(s => s.giaban >= 10000000 && s.giaban <= 15000000).ToList();
                        break;
                    case "price-5":
                        sanPhams = sanPhams.Where(s => s.giaban > 15000000 && s.giaban <= 20000000).ToList();
                        break;
                    case "price-6":
                        sanPhams = sanPhams.Where(s => s.giaban > 20000000 && s.giaban <= 25000000).ToList();
                        break;
                    case "price-7":
                        sanPhams = sanPhams.Where(s => s.giaban > 25000000).ToList();
                        break;

                }
            }
            List<HangSP> hsp = db.HangSP.Take(7).ToList();
            ViewBag.dsh = hsp;
            ViewBag.searchString = searchString;
            return View(sanPhams.ToPagedList(pageNumber, pageSize));
        }

        // GET: SanPhams/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            SanPham sanPham = db.SanPham.Find(id);
            if (sanPham == null)
            {
                return HttpNotFound();
            }

            // Lấy sản phẩm liên quan (ví dụ: cùng hãng, loại bỏ chính nó)
            var dslq = db.SanPham
                         .Where(sp => sp.mahang == sanPham.mahang && sp.masp != sanPham.masp)
                         .ToList();

            ViewBag.ds = dslq ?? new List<SanPham>(); // luôn đảm bảo không null

            return View(sanPham);

        }

        // GET: SanPhams/Create
        public ActionResult Create()
        {
            ViewBag.mahang = new SelectList(db.HangSP, "mahang", "tenhang");
            return View();
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "masp,mahang,tensp,hinhanh,soluong,giaban,mota,CPU,RAM,OS,manhinh,carddohoa,SSD,trangthai,model")] SanPham sanPham)
        {
            if (ModelState.IsValid)
            {
                db.SanPham.Add(sanPham);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            ViewBag.mahang = new SelectList(db.HangSP, "mahang", "tenhang", sanPham.mahang);
            return View(sanPham);
        }

        // GET: SanPhams/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            SanPham sanPham = db.SanPham.Find(id);
            if (sanPham == null)
            {
                return HttpNotFound();
            }
            ViewBag.mahang = new SelectList(db.HangSP, "mahang", "tenhang", sanPham.mahang);
            return View(sanPham);
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "masp,mahang,tensp,hinhanh,soluong,giaban,mota,CPU,RAM,OS,manhinh,carddohoa,SSD,trangthai,model")] SanPham sanPham)
        {
            if (ModelState.IsValid)
            {
                db.Entry(sanPham).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            ViewBag.mahang = new SelectList(db.HangSP, "mahang", "tenhang", sanPham.mahang);
            return View(sanPham);
        }

        // GET: SanPhams/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            SanPham sanPham = db.SanPham.Find(id);
            if (sanPham == null)
            {
                return HttpNotFound();
            }
            return View(sanPham);
        }

        // POST: SanPhams/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            SanPham sanPham = db.SanPham.Find(id);
            db.SanPham.Remove(sanPham);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
